{"noir_version":"0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c","hash":9411300375141314951,"abi":{"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"4":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"22":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"23":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"38":{"source":"// docs:start:add-trait\ntrait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field { fn add(self, other: Field) -> Field { self + other } }\n\nimpl Add for u64 { fn add(self, other: u64) -> u64 { self + other } }\nimpl Add for u32 { fn add(self, other: u32) -> u32 { self + other } }\nimpl Add for u16 { fn add(self, other: u16) -> u16 { self + other } }\nimpl Add for u8 { fn add(self, other: u8) -> u8 { self + other } }\n\nimpl Add for i8 { fn add(self, other: i8) -> i8 { self + other } }\nimpl Add for i16 { fn add(self, other: i16) -> i16 { self + other } }\nimpl Add for i32 { fn add(self, other: i32) -> i32 { self + other } }\nimpl Add for i64 { fn add(self, other: i64) -> i64 { self + other } }\n\n// docs:start:sub-trait\ntrait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field { fn sub(self, other: Field) -> Field { self - other } }\n\nimpl Sub for u64 { fn sub(self, other: u64) -> u64 { self - other } }\nimpl Sub for u32 { fn sub(self, other: u32) -> u32 { self - other } }\nimpl Sub for u16 { fn sub(self, other: u16) -> u16 { self - other } }\nimpl Sub for u8 { fn sub(self, other: u8) -> u8 { self - other } }\n\nimpl Sub for i8 { fn sub(self, other: i8) -> i8 { self - other } }\nimpl Sub for i16 { fn sub(self, other: i16) -> i16 { self - other } }\nimpl Sub for i32 { fn sub(self, other: i32) -> i32 { self - other } }\nimpl Sub for i64 { fn sub(self, other: i64) -> i64 { self - other } }\n\n// docs:start:mul-trait\ntrait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field { fn mul(self, other: Field) -> Field { self * other } }\n\nimpl Mul for u64 { fn mul(self, other: u64) -> u64 { self * other } }\nimpl Mul for u32 { fn mul(self, other: u32) -> u32 { self * other } }\nimpl Mul for u16 { fn mul(self, other: u16) -> u16 { self * other } }\nimpl Mul for u8 { fn mul(self, other: u8) -> u8 { self * other } }\n\nimpl Mul for i8 { fn mul(self, other: i8) -> i8 { self * other } }\nimpl Mul for i16 { fn mul(self, other: i16) -> i16 { self * other } }\nimpl Mul for i32 { fn mul(self, other: i32) -> i32 { self * other } }\nimpl Mul for i64 { fn mul(self, other: i64) -> i64 { self * other } }\n\n// docs:start:div-trait\ntrait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field { fn div(self, other: Field) -> Field { self / other } }\n\nimpl Div for u64 { fn div(self, other: u64) -> u64 { self / other } }\nimpl Div for u32 { fn div(self, other: u32) -> u32 { self / other } }\nimpl Div for u16 { fn div(self, other: u16) -> u16 { self / other } }\nimpl Div for u8 { fn div(self, other: u8) -> u8 { self / other } }\n\nimpl Div for i8 { fn div(self, other: i8) -> i8 { self / other } }\nimpl Div for i16 { fn div(self, other: i16) -> i16 { self / other } }\nimpl Div for i32 { fn div(self, other: i32) -> i32 { self / other } }\nimpl Div for i64 { fn div(self, other: i64) -> i64 { self / other } }\n\n// docs:start:rem-trait\ntrait Rem{\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 { fn rem(self, other: u64) -> u64 { self % other } }\nimpl Rem for u32 { fn rem(self, other: u32) -> u32 { self % other } }\nimpl Rem for u16 { fn rem(self, other: u16) -> u16 { self % other } }\nimpl Rem for u8 { fn rem(self, other: u8) -> u8 { self % other } }\n\nimpl Rem for i8 { fn rem(self, other: i8) -> i8 { self % other } }\nimpl Rem for i16 { fn rem(self, other: i16) -> i16 { self % other } }\nimpl Rem for i32 { fn rem(self, other: i32) -> i32 { self % other } }\nimpl Rem for i64 { fn rem(self, other: i64) -> i64 { self % other } }\n\n// docs:start:neg-trait\ntrait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field { fn neg(self) -> Field { -self } }\n\nimpl Neg for i8 { fn neg(self) -> i8 { -self } }\nimpl Neg for i16 { fn neg(self) -> i16 { -self } }\nimpl Neg for i32 { fn neg(self) -> i32 { -self } }\nimpl Neg for i64 { fn neg(self) -> i64 { -self } }\n// docs:end:neg-trait-impls\n\n","path":"std/ops/arith.nr"},"53":{"source":"use dep::bigint::{BigNum, BNExpressionInput};\nuse dep::bigint::fields::bn254Fq::BNParams as BNParams;\nuse dep::bigint::test_params::{\n    nonprime1000::Test1000NonPrimeParams, nonprime3000::Test3000NonPrimeParams,\n    nonprime4000::Test4000NonPrimeParams, prime2048::Test2048PrimeParams,\n    nonprime250::Test250NonPrimeParams, nonprime230::Test230NonPrimeParams,\n    nonprime470::Test470NonPrimeParams, nonprime590::Test590NonPrimeParams,\n    nonprime710::Test710NonPrimeParams, nonprime830::Test830NonPrimeParams,\n    nonprime950::Test950NonPrimeParams, nonprime1070::Test1070NonPrimeParams,\n    nonprime1190::Test1190NonPrimeParams, nonprime1310::Test1310NonPrimeParams,\n    nonprime1435::Test1435NonPrimeParams, nonprime1555::Test1555NonPrimeParams,\n    nonprime1675::Test1675NonPrimeParams, nonprime1790::Test1790NonPrimeParams,\n    nonprime1915::Test1915NonPrimeParams, nonprime2035::Test2035NonPrimeParams,\n    nonprime2155::Test2155NonPrimeParams\n};\nuse dep::bigint::BigNumParamsTrait;\n\ntype TestMod230 = BigNum<2, Test230NonPrimeParams>;\ntype TestMod250 = BigNum<3, Test250NonPrimeParams>;\ntype TestMod470 = BigNum<4, Test470NonPrimeParams>;\ntype TestMod590 = BigNum<5, Test590NonPrimeParams>;\ntype TestMod710 = BigNum<6, Test710NonPrimeParams>;\ntype TestMod830 = BigNum<7, Test830NonPrimeParams>;\ntype TestMod950 = BigNum<8, Test950NonPrimeParams>;\ntype TestMod1000 = BigNum<9, Test1000NonPrimeParams>;\ntype TestMod1070 = BigNum<9, Test1070NonPrimeParams>;\ntype TestMod1190 = BigNum<10, Test1190NonPrimeParams>;\ntype TestMod1310 = BigNum<11, Test1310NonPrimeParams>;\ntype TestMod1435 = BigNum<12, Test1435NonPrimeParams>;\ntype TestMod1555 = BigNum<13, Test1555NonPrimeParams>;\ntype TestMod1675 = BigNum<14, Test1675NonPrimeParams>;\ntype TestMod1790 = BigNum<15, Test1790NonPrimeParams>;\ntype TestMod1915 = BigNum<16, Test1915NonPrimeParams>;\ntype TestMod2035 = BigNum<17, Test2035NonPrimeParams>;\ntype TestMod2155 = BigNum<18, Test2155NonPrimeParams>;\ntype TestMod2048 = BigNum<18, Test2048PrimeParams>;\ntype TestMod3000 = BigNum<26, Test3000NonPrimeParams>;\ntype TestMod4000 = BigNum<34, Test4000NonPrimeParams>;\n\nfn main(a: Field, b: Field) {\n    // Enter function to benchmark\n    // run `nargo info` to get gatecount\n    // ~3000 gates are added upfront because of rangecheck, see\n    // https://hackmd.io/xyvJnW9iQyWda-IJK1_yDw?#When-to-use-Karatsuba-and-when-to-use-Schoolbook\n    benchmark_multiplication_4000(a, b);\n}\n\nfn benchmark_multiplication<let N: u64, Params>(x: Field, y: Field, _: BigNum<N, Params>) where Params: BigNumParamsTrait<N> {\n    let z = x + y;\n    let a = z * z;\n    let b = a * a;\n\n    let mut lhs: BigNum<N, Params> = BigNum::__derive_from_seed([a as u8]);\n    let mut rhs: BigNum<N, Params> = BigNum::__derive_from_seed([b as u8]);\n\n    let mut lhs_expr = BNExpressionInput::new(lhs, false);\n    let rhs_expr = BNExpressionInput::new(rhs, false);\n\n    let out: BigNum<N, Params> = lhs_expr.value.__mulmod(rhs_expr.value);\n    out.validate_in_range();\n    let rem = BNExpressionInput::new(out, true);\n    BigNum::evaluate_quadratic_expression([[lhs_expr]], [[rhs_expr]], [rem]);\n}\n\nfn benchmark_multiplication_230(x: Field, y: Field) {\n    let stub: TestMod230 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_250(x: Field, y: Field) {\n    let stub: TestMod250 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_470(x: Field, y: Field) {\n    let stub: TestMod470 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_590(x: Field, y: Field) {\n    let stub: TestMod590 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_710(x: Field, y: Field) {\n    let stub: TestMod710 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_830(x: Field, y: Field) {\n    let stub: TestMod830 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_950(x: Field, y: Field) {\n    let stub: TestMod950 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1070(x: Field, y: Field) {\n    let stub: TestMod1070 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1190(x: Field, y: Field) {\n    let stub: TestMod1190 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1310(x: Field, y: Field) {\n    let stub: TestMod1310 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1435(x: Field, y: Field) {\n    let stub: TestMod1435 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1555(x: Field, y: Field) {\n    let stub: TestMod1555 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1675(x: Field, y: Field) {\n    let stub: TestMod1675 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1790(x: Field, y: Field) {\n    let stub: TestMod1790 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1915(x: Field, y: Field) {\n    let stub: TestMod1555 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_2035(x: Field, y: Field) {\n    let stub: TestMod2035 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_2155(x: Field, y: Field) {\n    let stub: TestMod2155 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n}\n\nfn benchmark_multiplication_1000(x: Field, y: Field) {\n    let stub: TestMod1000 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n    // Multiplication 9 limbs\n    // Schoolbook 4042 <- slightly better\n    // 1-level Karatsuba 4044\n}\n\nfn benchmark_multiplication_3000(x: Field, y: Field) {\n    let stub: TestMod3000 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n    // Multiplication 26 limbs\n    // Schoolbook 4996\n    // 1-level Karatsuba 4924\n    // 2-level Karatsuba 4909 <- optimal\n    // 3-level Karatsuba 4998\n}\n\nfn benchmark_multiplication_4000(x: Field, y: Field) {\n    let stub: TestMod4000 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n    // Multiplication 34 limbs\n    // Schoolbook 6841\n    // 1-level Karatsuba 6730\n    // 2-level Karatsuba 6684 <- optimal\n    // 3-level Karatsuba 6783\n}\n\nfn benchmark_multiplication_2048(x: Field, y: Field) {\n    let stub: TestMod2048 = BigNum::new();\n    benchmark_multiplication(x, y, stub)\n    // Multiplication 18 limbs\n    // Schoolbook 6800\n    // 1-level Karatsuba 6761 <- optimal\n    // 2-level Karatsuba 6788\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir-bigint-bench/src/main.nr"},"56":{"source":"// Copyright 2024 Zac Williamson\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//        http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// With changes from HashCloak\n\nmod utils;\nmod bignum_test;\nmod fields;\nmod mul;\nmod test_params;\n\nuse dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u64> {\n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    fn modulus() -> [Field; N];\n\n    /**\n     * @brief double_modulus: used when performing negations and subtractions\n     **/\n    fn double_modulus() -> [Field; N];\n\n    /**\n     * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n     **/\n    fn redc_param() -> [Field; N];\n\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u64;\n\n    /**\n     * @brief efficient multiplication of 2 N-length arrays. To use in constrained fn\n     **/\n    fn mult(a: [Field; N], b: [Field; N]) -> ArrayX<Field, N, 2>;\n}\n\n/**\n * @brief BNExpressionInput used to define inputs into `BigNum::evaluate_quadratic_expression`\n *        (evaluate_quadratic_expression is the basic building block for efficiently evaluating BigNum algebra)\n**/\nstruct BNExpressionInput<let N: u64, Params> {\n    value: BigNum<N, Params>,\n    is_negative: bool,\n}\n\nimpl<let N: u64, Params> BNExpressionInput<N, Params> {\n    fn new(input: BigNum<N, Params>, _is_negative: bool) -> Self {\n        BNExpressionInput { value: input, is_negative: _is_negative }\n    }\n}\n\nstruct BigNum<let N: u64,Params> {\n    limbs: [Field; N],\n}\n\nimpl<let N: u64, Params> BigNum<N, Params> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n\n    fn one() -> Self {\n        let mut result = BigNum::new();\n        result.limbs[0] = 1;\n        result\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_byte_be<let NBytes: u64>(x: [u8; NBytes]) -> Self where Params: BigNumParamsTrait<N> {\n        let num_bits: u64 = NBytes * 8;\n        let modulus_bits: u64 = Params::modulus_bits();\n        assert(num_bits > modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n        for i in 0..N {\n            let mut limb: Field = 0;\n            for j in 0..15 {\n                limb *= 256;\n                limb += x[i * 15 + j] as Field;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = num_bits - modulus_bits;\n        if num_bits == modulus_bits {\n            max_bits_in_most_significant_byte = 8;\n        }\n        let most_significant_byte: Field = x[N * 15 - 1] as Field;\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    // N.B. not cryptographically secure! only use in tests\n    unconstrained fn __derive_from_seed<let SeedBytes: u64>(seed: [u8; SeedBytes]) -> Self where Params: BigNumParamsTrait<N> {\n        let mut rolling_seed = seed;\n        let mut unreduced: Self = Self { limbs: [0; N] };\n\n        let half_N: u64 = N / 2;\n        for i in 0..(half_N) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n                hi += hash[j] as Field;\n                lo += hash[j + 15] as Field;\n            }\n            unreduced.limbs[2 * i] = hi;\n            unreduced.limbs[2 * i + 1] = lo;\n            rolling_seed[0] += 1;\n        }\n        if (half_N * 2 != N) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            unreduced.limbs[N - 1] = hi;\n        }\n        let to_reduce: ArrayX<Field, N, 2> = ArrayX { segments: [unreduced.limbs, [0; N]] };\n        let (_, remainder) = BigNum::__barrett_reduction(to_reduce, Params::redc_param(), Params::modulus_bits(), Params::modulus());\n        BigNum { limbs: remainder }\n    }\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self) -> [bool; N] where Params: BigNumParamsTrait<N> {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = Params::modulus();\n        flags[0] = modulus[0].lt(self.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(self.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __normalize_limbs<let NumSegments: u64>(x: ArrayX<Field, N, NumSegments>, range: u64) -> ArrayX<Field, N, NumSegments> {\n        let mut normalized: ArrayX<Field, N, NumSegments> = ArrayX::new();\n        let mut inp = x;\n        for i in 0..(range - 1) {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(i));\n\n            normalized.set(i, lo);\n            inp.set(i + 1, inp.get(i + 1) + hi);\n        }\n        {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(range - 1));\n            normalized.set(range - 1, lo);\n            assert(hi == 0);\n        }\n        normalized\n    }\n\n    unconstrained fn __powmod(self: Self, exponent: Self) -> Self where Params: BigNumParamsTrait<N> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: Self = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = accumulator.__mulmod(accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = accumulator.__mulmod(self);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __invmod(self: Self) -> Self where Params: BigNumParamsTrait<N> {\n        let modulus_u60: U60Repr<N, 2> = U60Repr::from(Params::modulus());\n        let one_u60: U60Repr<N, 2> = U60Repr::from(BigNum::one().limbs);\n        let exponent = modulus_u60.sub(one_u60.add(one_u60));\n        self.__powmod(BigNum { limbs: U60Repr::into(exponent) })\n    }\n\n    unconstrained fn __divmod(self: Self, divisor: Self) -> Self where Params: BigNumParamsTrait<N> {\n        let t0 = divisor.__invmod();\n        self.__mulmod(t0)\n    }\n\n    unconstrained fn __barrett_reduction(\n        x: ArrayX<Field, N, 2>,\n        redc_param: [Field; N],\n        k: u64,\n        modulus: [Field; N]\n    ) -> ([Field; N], [Field; N]) {\n        let mut mulout: ArrayX<Field, N, 3>  = ArrayX { segments: [[0; N]; 3] };\n        for i in 0..(N + N) {\n            for j in 0..N {\n                mulout.add_assign(i + j, x.get(i) * redc_param[j]);\n            }\n        }\n        mulout = BigNum::__normalize_limbs(mulout, 3 * N - 2);\n        let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n        let mut quotient_u60 = mulout_u60.shr((k + k));\n\n        // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n        //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n        let partial_quotient: ArrayX<Field, N, 2> = quotient_u60.into_arrayX();\n\n        // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n        let mut quotient_mul_modulus: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n        let mut quotient_mul_modulus_normalized: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n        for j in 0..N {\n            for i in 0..(N + N - j) {\n                quotient_mul_modulus.add_assign(i + j, partial_quotient.get(i) * modulus[j]);\n            }\n        }\n\n        for i in 0..(N + N - 1) {\n            let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus.get(i));\n            quotient_mul_modulus_normalized.set(i, lo);\n            // TODO: what is faster, leaving this if statement in or out?\n            // (array is size-1 too large so we can tolerate adding 0 into max element)\n            //if (i + 1 < N + N - 1) {\n            quotient_mul_modulus.add_assign(i + 1, hi);\n            //}\n        }\n        let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n        let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n\n        let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n        let modulus_u60: U60Repr<N, 4> = U60Repr::from(modulus);\n        if (remainder_u60.gte(modulus_u60)) {\n            remainder_u60 = remainder_u60 - modulus_u60;\n            quotient_u60.increment();\n        }\n\n        (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n    }\n\n    unconstrained fn __mulmod_with_quotient(self, rhs: Self) -> (Self, Self) where Params: BigNumParamsTrait<N> {\n        let mut mul: ArrayX<Field, N, 2> = ArrayX::new();\n        for i in 0..N {\n            for j in 0..N {\n                mul.add_assign(i + j, self.limbs[i] * rhs.limbs[j]);\n            }\n        }\n        let (q, r) = BigNum::__barrett_reduction(\n            BigNum::__normalize_limbs(mul, N + N - 1),\n            Params::redc_param(),\n            Params::modulus_bits(),\n            Params::modulus()\n        );\n\n        (Self { limbs: q }, Self { limbs: r })\n    }\n\n    unconstrained fn __mulmod(self, rhs: Self) -> Self where Params: BigNumParamsTrait<N> {\n        let (_, b) = self.__mulmod_with_quotient(rhs);\n        b\n    }\n\n    unconstrained fn __addmod(self, rhs: Self) -> Self where Params: BigNumParamsTrait<N> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(self.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        let modulus_u60 : U60Repr<N,2> = U60Repr::from(Params::modulus());\n        if z_u60.gte(modulus_u60) {\n            z_u60 = z_u60 - modulus_u60;\n        }\n        Self { limbs: U60Repr::into(z_u60) }\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __negate(self) -> Self where Params: BigNumParamsTrait<N> {\n        let f: [Field; N] = self.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let modulus_u60 : U60Repr<N, 2> = U60Repr::from(Params::double_modulus());\n        Self { limbs: U60Repr::into(modulus_u60 - x_u60) }\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__negate` for why we use 2p instead of p\n     **/\n    unconstrained fn __submod(self, rhs: Self) -> Self where Params: BigNumParamsTrait<N> {\n        self.__addmod(rhs.__negate())\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of BNExpressionInput values (unconstrained)\n     * @description This method computes separate totals for positive/negative BNExpressionInput values.\n     *              This is so that we can later evaluate which BigNum limbs will underflow when combining positive/negative sums\n     **/\n    unconstrained fn __add_linear_expression<let M: u64>(x: [BNExpressionInput<N, Params>; M]) -> ([Field; N], [Field; N]) where Params: BigNumParamsTrait<N> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs_sum_p: [Field; N] = [0; N];\n        let mut lhs_sum_n: [Field; N] = [0; N];\n        let modulus2: [Field;N] = Params::double_modulus();\n        for i in 0..M {\n            if (x[i].is_negative) {\n                for j in 0..N {\n                    lhs_sum_p[j] = lhs_sum_p[j] + modulus2[j];\n                    lhs_sum_n[j] = lhs_sum_n[j] + x[i].value.limbs[j];\n                }\n            } else {\n                for j in 0..N {\n                    lhs_sum_p[j] = lhs_sum_p[j] + x[i].value.limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        (lhs_sum_p, lhs_sum_n)\n        //   let result_p: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_p), N);\n        //  let result_n: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_n), N);\n        //  (result_p.segments[0], result_n.segments[0])\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BNExpressionInput\n     * @param rhs_terms a 2D array of BNExpressionInput\n     * @param linear_terms a 2D array of BNExpressionInput\n     **/\n    unconstrained fn __compute_quadratic_expression_quotient<let LHS_N: u64, let RHS_N: u64, let NUM_PRODUCTS: u64, let ADD_N: u64>(\n        lhs_terms: [[BNExpressionInput<N, Params>; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BNExpressionInput<N, Params>; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BNExpressionInput<N, Params>; ADD_N]\n    ) -> (Self, ArrayX<Field, N, 2>) where Params: BigNumParamsTrait<N> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs_p: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut lhs_n: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs_p: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs_n: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add_p: [Field; N] = [0; N];\n        let mut add_n: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            let (l_p, l_n): ([Field; N], [Field; N]) = BigNum::__add_linear_expression(lhs_terms[i]);\n            let (r_p, r_n): ([Field; N], [Field; N]) = BigNum::__add_linear_expression(rhs_terms[i]);\n            lhs_p[i] = l_p;\n            lhs_n[i] = l_n;\n            rhs_p[i] = r_p;\n            rhs_n[i] = r_n;\n        }\n\n        let (add_p, add_n): ([Field; N], [Field; N]) = BigNum::__add_linear_expression(linear_terms);\n\n        let mut mulout_p: ArrayX<Field, N,2> = ArrayX::new();\n        let mut mulout_n: ArrayX<Field, N,2> = ArrayX::new();\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    assert(lhs_n[k][i] == 0);\n                    assert(rhs_n[k][i] == 0);\n                    mulout_p.add_assign(i + j, lhs_p[k][i] * rhs_p[k][j]);\n                    mulout_n.add_assign(i + j, lhs_n[k][i] * rhs_n[k][j]);\n                }\n            }\n            mulout_p.add_assign(i, add_p[i]);\n            mulout_n.add_assign(i, add_n[i]);\n        }\n\n        let T0: ArrayX<Field, N, 2> = BigNum::__normalize_limbs(mulout_p, N + N - 1);\n        let T1: ArrayX<Field, N, 2> = BigNum::__normalize_limbs(mulout_n, N + N - 1);\n\n        let mulout_pu60: U60Repr<N, 4> = U60Repr::new(T0);\n        let mulout_nu60: U60Repr<N, 4> = U60Repr::new(T1);\n        let relation_result: ArrayX<Field, N, 2> = BigNum::__normalize_limbs((mulout_pu60 - mulout_nu60).into_arrayX(), N + N - 1);\n\n        let modulus: [Field; N] = Params::modulus();\n        let (quotient, remainder) = BigNum::__barrett_reduction(relation_result, Params::redc_param(), Params::modulus_bits(), modulus);\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n.add_assign(i + j, quotient[i] * modulus[j]);\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: ArrayX<Field, N, 2> = ArrayX::new();\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags.set(0, mulout_p.get(0).lt(mulout_n.get(0)) as Field);\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p.get(0) - mulout_n.get(0) + (borrow_flags.get(0) * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p.add_assign(i, hi_bits);\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p.get(i).lt(mulout_n.get(i) + (borrow_flags.get(i - 1) * borrow_carry)) as Field;\n            borrow_flags.set(i, underflow);\n\n            hi_bits = (mulout_p.get(i) - mulout_n.get(i) + (borrow_flags.get(i) * borrow_shift)\n                - (borrow_flags.get(i - 1) * borrow_carry)) * downshift;\n        }\n\n        (Self { limbs: quotient }, borrow_flags)\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n    fn validate_in_range(self) where Params: BigNumParamsTrait<N> {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, other: Self) where Params: BigNumParamsTrait<N> {\n        let mut lhs: Field = 0;\n        let mut rhs: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = Params::modulus();\n        for i in 0..N {\n            lhs *= two_pow_120;\n            rhs *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            lhs += self.limbs[N - i - 1];\n            rhs += other.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = lhs - rhs;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) where Params: BigNumParamsTrait<N> {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn validate_in_field(self: Self) where Params: BigNumParamsTrait<N> {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = Params::modulus();\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - self.limbs[i];\n        }\n        let borrow_flags = self.__validate_in_field_compute_borrow_flags();\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        (Self { limbs: p_minus_self }).validate_in_range();\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(self: Self, other: Self, predicate: bool) -> Self where Params: BigNumParamsTrait<N> {\n        let mut result: Self = Self { limbs: [0; N] };\n\n        for i in 0..N {\n            result.limbs[i] = (predicate as Field) * (other.limbs[i] - self.limbs[i]) + self.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo Params::modulus()\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BNExpressionInput\n     * @param rhs_terms a 2D array of BNExpressionInput\n     * @param linear_terms a 2D array of BNExpressionInput\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u64, let RHS_N: u64, let NUM_PRODUCTS: u64, let ADD_N: u64>(\n        lhs_products: [[BNExpressionInput<N, Params>; LHS_N]; NUM_PRODUCTS],\n        rhs_products: [[BNExpressionInput<N, Params>; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BNExpressionInput<N, Params>; ADD_N]\n    ) where Params: BigNumParamsTrait<N> {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, borrow_flags): (Self, ArrayX<Field, N, 2>) = BigNum::__compute_quadratic_expression_quotient(lhs_products, rhs_products, linear_terms);\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n        let double_modulus: [Field; N] = Params::double_modulus();\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    let is_negative: bool = lhs_products[k][j].is_negative;\n                    if (is_negative) {\n                        t0[k][i] -= lhs_products[k][j].value.limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_products[k][j].value.limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    let is_negative: bool = rhs_products[k][j].is_negative;\n                    if (is_negative) {\n                        t1[k][i] -= rhs_products[k][j].value.limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_products[k][j].value.limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                let is_negative: bool = linear_terms[j].is_negative;\n                if (is_negative) {\n                    t4[i] -= linear_terms[j].value.limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].value.limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: ArrayX<Field, N,2> = ArrayX::new();\n        //       let fff: [Field; N] = quotient.limbs;\n        //      let mut borrow_flags: ArrayX<Field, N,2> = BigNum::get_borrow_flags3(t0, t1, t2, t3, t4, fff, Params::modulus());\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        let modulus: [Field; N] = Params::modulus();\n\n        // Products\n        for k in 0..NUM_PRODUCTS {\n          // This does the most efficient multiplication based on array length N\n          let mult_res = Params::mult(t0[k], t1[k]);\n          for i in 0..N+N-1 {\n            product_limbs.add_assign(i, mult_res.get(i));\n          }\n        }\n\n        let product_q_p = Params::mult(quotient.limbs, modulus);\n        for i in 0..N+N-1 {\n            product_limbs.sub_assign(i, product_q_p.get(i));\n        }\n\n        for i in 0..N {\n            product_limbs.add_assign(i, t4[i]);\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags.get(0).assert_max_bit_size(1);\n        product_limbs.add_assign(0, borrow_flags.get(0) * borrow_shift);\n        for i in 1..(N + N - 2) {\n            borrow_flags.get(i).assert_max_bit_size(1);\n            product_limbs.add_assign(\n                i,\n                (borrow_flags.get(i) * borrow_shift - borrow_flags.get(i - 1) * borrow_carry)\n            );\n        }\n        product_limbs.sub_assign(N + N - 2, borrow_flags.get(N + N - 3) * borrow_carry);\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs.mul_assign(i, hi_downshift);\n            std::as_witness(product_limbs.get(i));\n            product_limbs.get(i).assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs.add_assign(i + 1, product_limbs.get(i));\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs.get(N + N - 2) == 0);\n    }\n}\n\nimpl<let N: u64, Params> std::ops::Add for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let result = self.__addmod(other);\n        // N.B. using `[]` as a parameter input does not produce a 2D array of size 0 (it's a 2D array of size-1 where the inner array is empty)\n        let empty_expression: [[BNExpressionInput<N, Params>; 0]; 0] = [];\n        BigNum::evaluate_quadratic_expression(\n            empty_expression,\n            empty_expression,\n            [BNExpressionInput::new(self, false), BNExpressionInput::new(other, false), BNExpressionInput::new(result, true)]\n        );\n        result\n    }\n}\n\nimpl<let N: u64, Params> std::ops::Sub for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let result = self.__submod(other);\n        // N.B. using `[]` as a parameter input does not produce a 2D array of size 0 (it's a 2D array of size-1 where the inner array is empty)\n        let empty_expression: [[BNExpressionInput<N, Params>; 0]; 0] = [];\n        BigNum::evaluate_quadratic_expression(\n            empty_expression,\n            empty_expression,\n            [BNExpressionInput::new(self, true), BNExpressionInput::new(other, false), BNExpressionInput::new(result, false)]\n        );\n        result\n    }\n}\n\nimpl<let N: u64, Params> std::ops::Mul for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n    let result = self.__mulmod(other);\n        BigNum::evaluate_quadratic_expression(\n            [[BNExpressionInput::new(self, false)]],\n            [[BNExpressionInput::new(other, false)]],\n            [BNExpressionInput::new(result, true)]\n        );\n        result\n    }\n}\n\nimpl<let N: u64, Params> std::ops::Div for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, other: Self) -> Self {\n        let result = self.__divmod(other);\n        BigNum::evaluate_quadratic_expression(\n            [[BNExpressionInput::new(result, false)]],\n            [[BNExpressionInput::new(other, false)]],\n            [BNExpressionInput::new(self, true)]\n        );\n        result\n    }\n}\n\nimpl<let N: u64, Params> std::cmp::Eq for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_bigint/src/lib.nr"},"58":{"source":"// Copyright 2024 Zac Williamson\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//        http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nuse dep::std;\n\n/**\n * @brief Array abstraction, whose size is a known multiplier `SizeMultiplier` of an initial size `N`\n *\n * @note ArrayX is a workaround for the lack of arithmetic over generics.\n *       e.g. [Field; N * 2] is not currently possible\n *       This abstraction can be removed once Noir supports arithmetic on generics.\n**/\nstruct ArrayX<T, let N: u64, let SizeMultiplier: u8> {\n    segments: [[T; N]; SizeMultiplier]\n}\n\nimpl<T, let N: u64, let SizeMultiplier: u8> std::convert::From<[T; N]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default { \n    fn from(input: [T; N]) -> Self {\n        assert(N == 1);\n        let mut result = ArrayX::new();\n        result.segments[0] = input;\n        result\n    }\n}\n\nimpl<T, let N: u64, let SizeMultiplier: u8> std::convert::From<[[T; N]; SizeMultiplier]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default { \n    fn from(input: [[T; N]; SizeMultiplier]) -> Self {\n        ArrayX{ segments: input }\n    }\n}\n\nimpl<T, let N: u64, let SizeMultiplier: u8> std::cmp::Eq for ArrayX<T, N, SizeMultiplier> where T: std::cmp::Eq { \n    fn eq(self, other: Self) -> bool {\n        let mut result: bool = true;\n        for i in 0..SizeMultiplier {\n            for j in 0..N {\n                result = result & (self.segments[i][j] == other.segments[i][j]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u64, let SizeMultiplier: u8> ArrayX<T, N, SizeMultiplier> {\n\n    fn new() -> Self where T: std::default::Default {\n        ArrayX { segments: [[T::default(); N]; SizeMultiplier] }\n    }\n\n    fn mul_assign(&mut self, i: u64, rhs: T) where T: std::ops::Mul {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] *= rhs;\n    }\n\n    fn add_assign(&mut self, i: u64, rhs: T) where T: std::ops::Add {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] += rhs;\n    }\n\n    fn sub_assign(&mut self, i: u64, rhs: T) where T: std::ops::Sub {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] -= rhs;\n    }\n\n    fn set(&mut self, i: u64, x: T) {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] = x;\n    }\n\n    fn get(self, i: u64) -> T {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index]\n    }\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_bigint/src/utils/arrayX.nr"},"60":{"source":"// Copyright 2024 Zac Williamson\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//        http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nuse dep::std;\n\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct U60Repr<let N: u64, let NumSegments: u64>\n{\n    limbs: ArrayX<u64, N, NumSegments>\n}\n\nimpl<let N: u64, let NumSegments: u64> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut carry: u64 = 0;\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + b.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                result.limbs.segments[j][i] = add;\n            }\n        }\n\n        result\n    }\n}\n\nimpl<let N: u64, let NumSegments: u64> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                borrow = ((b.limbs.segments[j][i] + borrow_in) > self.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.limbs.segments[j][i] - b.limbs.segments[j][i] - borrow_in;\n                result.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u64, let NumSegments: u64> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> { \n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N) {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n}\n\nimpl<let N: u64, let NumSegments: u64> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u64, let NumSegments: u64> std::cmp::Eq for U60Repr<N, NumSegments> { \n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u64, let NumSegments: u64> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u64>(x: ArrayX<Field, N, NumFieldSegments>) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x.get(i));\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n\n    unconstrained fn into_arrayX<let NumFieldSegments: u64>(x: U60Repr<N, NumSegments>) -> ArrayX<Field, N, NumFieldSegments> {\n        let mut result: ArrayX<Field, N, NumFieldSegments> = ArrayX { segments: [[0; N]; NumFieldSegments] };\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumFieldSegments) {\n            result.set(\n                i,\n                x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60)\n            );\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs.get((N * NumSegments) - 1 - i) < (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs.get((N * NumSegments) - 1 - i) != (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs.get(0) == b.limbs.get(0));\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u64) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs.get(segment_index);\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u64) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs: u64 = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs.set(\n            0,\n            (self.limbs.get(0 + num_shifted_limbs as u64) >> limb_shift as u8)\n        );\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) as u64 {\n            result.limbs.set(\n                i,\n                (self.limbs.get(i + num_shifted_limbs as u64) >> limb_shift as u8)\n            );\n            let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs.segments[0][0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs.segments[0][0] = add;\n        for i in 1..N {\n            let mut add: u64 = self.limbs.segments[0][i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs.segments[0][i] = add;\n        }\n        for j in 1..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                self.limbs.segments[j][i] = add;\n            }\n        }\n    }\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_bigint/src/utils/u60_representation.nr"},"61":{"source":"// Copyright 2024 Zac Williamson\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//        http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License\n\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8] = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 16] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_bigint/src/utils/split_bits.nr"}},"names":["main"]}